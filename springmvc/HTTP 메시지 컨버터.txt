** @ResponseBody 사용 원리
   @ResponseBody 를 사용
       - HTTP의 BODY에 문자 내용을 직접 반환
       - viewResolver 대신에 HttpMessageConverter 가 동작
       - 기본 문자처리: StringHttpMessageConverter
       - 기본 객체처리: MappingJackson2HttpMessageConverter
       - byte 처리 등등 기타 여러 HttpMessageConverter가 기본으로 등록되어 있음

   참고: 응답의 경우 클라이언트의 HTTP Accept 해더와 서버의 컨트롤러 반환 타입 정보 둘을 조합해서
        HttpMessageConverter 가 선택된다.

   스프링 MVC는 다음의 경우에 HTTP 메시지 컨버터를 적용한다.
       HTTP 요청: @RequestBody , HttpEntity(RequestEntity)
       HTTP 응답: @ResponseBody , HttpEntity(ResponseEntity)

   - HTTP 메시지 컨버터는 HTTP 요청, HTTP 응답 둘 다 사용된다.
        canRead() , canWrite() : 메시지 컨버터가 해당 클래스, 미디어타입을 지원하는지 체크
        read() , write() : 메시지 컨버터를 통해서 메시지를 읽고 쓰는 기능


   ** 몇가지 주요한 메시지 컨버터(아래 순서대로 우선순위임)
       1.ByteArrayHttpMessageConverter : byte[] 데이터를 처리한다.
           클래스 타입: byte[] , 미디어타입: */* ,
               요청 예) @RequestBody byte[] data
               응답 예) @ResponseBody return byte[] 쓰기 미디어타입 application/octet-stream

       2.StringHttpMessageConverter : String 문자로 데이터를 처리한다.
           클래스 타입: String , 미디어타입: */*
               요청 예) @RequestBody String data
               응답 예) @ResponseBody return "ok" 쓰기 미디어타입 text/plain

       3.MappingJackson2HttpMessageConverter : application/json
           클래스 타입: 객체 또는 HashMap , 미디어타입 application/json 관련
               요청 예) @RequestBody HelloData data
               응답 예) @ResponseBody return helloData 쓰기 미디어타입 application/json 관련


** HTTP 요청 데이터 읽기
    HTTP 요청이 오고, 컨트롤러에서 @RequestBody , HttpEntity 파라미터를 사용한다.
    메시지 컨버터가 메시지를 읽을 수 있는지 확인하기 위해 canRead() 를 호출한다.
        대상 클래스 타입을 지원하는가.
            예) @RequestBody 의 대상 클래스 ( byte[] , String , HelloData )
        HTTP 요청의 Content-Type 미디어 타입을 지원하는가.
            예) text/plain , application/json , */*
    canRead() 조건을 만족하면 read() 를 호출해서 객체를 생성하고, 반환한다.

** HTTP 응답 데이터 생성
    컨트롤러에서 @ResponseBody , HttpEntity 로 값이 반환된다.
    메시지 컨버터가 메시지를 쓸 수 있는지 확인하기 위해 canWrite() 를 호출한다.
        대상 클래스 타입을 지원하는가.
            예) return의 대상 클래스 ( byte[] , String , HelloData )
        HTTP 요청의 Accept 미디어 타입을 지원하는가.(더 정확히는 @RequestMapping 의 produces )
            예) text/plain , application/json , */*
    canWrite() 조건을 만족하면 write() 를 호출해서 HTTP 응답 메시지 바디에 데이터를 생성한다.


Http 요청 데이터 읽기 과정 예시
----------------예시 1------------------------------------------
    content-type: application/json

    @RequestMapping
    void hello(@RequestBody String data) {}
----------------------------------------------------------------
    위와 같은 상황일 때, 과정을 나열해보면,
    1.클래스 타입이 byte 가 아니어서 ByteArrayHttpMessageConverter 가 패스,
    2.다음 우선순위인 StringHttpMessageConverter 의 조건을 본다.
        2-1. 클래스 타입이 String 이다 -> 합격
        2-2. 미디어타입이 */* 를 허용하는데, 모두 허용되는거니까 합격
    3. StringHttpMessageConverter 가 선택된다.


----------------예시 2------------------------------------------
    content-type: application/json

    @RequestMapping
    void hello(@RequestBody HelloData data) {}
----------------------------------------------------------------
    위와 같은 상황일 때, 과정을 나열해보면,
        1.클래스 타입이 byte 가 아니어서 ByteArrayHttpMessageConverter 가 패스,
        2.클래스 타입이 String 이 아니어서 StringHttpMessageConverter 가 패스,
        3.다음 우선순위인 MappingJackson2HttpMessageConverter 의 조건을 본다.
            3-1. 클래스 타입이 객체 또는 HashMap 이다 -> HelloDate 객체이다 -> 합격
            3-2. 미디어타입 application/json 관련을 허용하는데, 일치해서 합격
        4. MappingJackson2HttpMessageConverter 가 선택된다.


----------------예시 3------------------------------------------
    content-type: text/html

    @RequestMapping
    void hello(@RequestBody HelloData data) {}
----------------------------------------------------------------
    위와 같은 상황일 때, 과정을 나열해보면,
        1.클래스 타입이 byte 가 아니어서 ByteArrayHttpMessageConverter 가 패스,
        2.클래스 타입이 String 이 아니어서 StringHttpMessageConverter 가 패스,
        3.다음 우선순위인 MappingJackson2HttpMessageConverter 의 조건을 본다.
            3-1. 클래스 타입이 객체 또는 HashMap 이다 -> HelloDate 객체이다 -> 합격
            3-2. 미디어타입 application/json 관련을 허용하는데, 일치하지 않는다
        4. 탈락