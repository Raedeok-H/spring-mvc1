** 요청 매핑 헨들러 어뎁터 구조
  Q: 그렇다면 HTTP 메시지 컨버터는 스프링 MVC 어디쯤에서 사용되는 것일까?
  A: @RequestMapping 을 처리하는 핸들러 어댑터인
     RequestMappingHandlerAdapter (요청 매핑 헨들러 어뎁터)에 있다.

  RequestMappingHandlerAdapter 동작 방식
      1.핸들러 어댑터에서 핸들러(컨트롤러)를 호출시
            1.1 ArgumentResolver 를 거치고 (스프링은 30개가 넘는 ArgumentResolver 를 기본으로 제공)-> HandlerMethodArgumentResolver 인터페이스의 supportsParameter 메소드의 구현체들을 보면 된다.

      2. 핸들러로 파라미터가 도착하여, 로직 처리후 결과를 보내면,

            3.0 ReturnValueHandler 를 거치고 (스프링은 10여개가 넘는 ReturnValueHandler 를 지원한다.)-> HandlerMethodReturnValueHandler 인터페이스의 supportsParameter 메소드의 구현체들을 보면 된다.
      3. 핸들러 어댑터로 결과가 도착한다.


  원한다면 직접 이 인터페이스를 확장해서 원하는 ArgumentResolver 를 만들 수도 있다.
  실제 확장하는 예제는 향후 로그인 처리에서 진행.


  Q: HTTP 메시지 컨버터는 어디쯤 있을까?
  A: HTTP 메시지 컨버터를 사용하는 @RequestBody 도 컨트롤러가 필요로 하는 파라미터의 값에 사용된다.
     @ResponseBody 의 경우도 컨트롤러의 반환 값을 이용한다.

  - 요청의 경우:
    @RequestBody 를 처리하는 ArgumentResolver 가 있고,
    HttpEntity 를 처리하는 ArgumentResolver 가 있다.
    이 ArgumentResolver 들이 HTTP 메시지 컨버터를 사용해서 필요한 객체를 생성하는 것이다.

  - 응답의 경우:
    @ResponseBody 와 HttpEntity 를 처리하는 ReturnValueHandler 가 있다.
    그리고 여기에서 HTTP 메시지 컨버터를 호출해서 응답 결과를 만든다.



  * 기능확장
   - HandlerMethodArgumentResolver
   - HandlerMethodReturnValueHandler
   - HttpMessageConverter

   스프링은 위 3개를 인터페이스로 제공하기 때문에 기능확장이 가능하지만,
   확장할 일이 많지 않다.
   만약 확장이 필요하면, WebMvcConfigurer 를 상속받아서 빈으로 사용.